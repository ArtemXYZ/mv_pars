from typing import Coroutine

# ----------------------------------------------------------------------------------------------------------------------
# ---------------------------------- Импорт стандартных библиотек
# ---------------------------------- Импорт сторонних библиотек
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, text

# -------------------------------- Локальные модули
from settings.configs import ENGINE

SQL_NAME_CATEGORY_AND_CATEGORY_ID = """
    select 
        m.category_id
        ,m.name_category 
    from inlet.current_stock_mvideo as m 
    where 
        m.category_id IS NULL 
        and m.name_category IS not NULL
        and m.name_category != '0'
    LIMIT 1
"""

# != ANY(:name_category_reference) NOT IN (:name_category_reference)
SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW = """
    select 
        m.category_id
        ,m.name_category 
    from inlet.current_stock_mvideo as m 
    where 
        m.category_id IS NULL 
        and m.name_category NOT IN ({0})
        and m.name_category IS not NULL
        and m.name_category != '0'
    LIMIT 1
"""

SQL_REFERENCE_CATEGORY_ID = """
    select 
    distinct 
        m.category_id
        ,m.name_category 
    from inlet.current_stock_mvideo as m 
    where 
        m.name_category = :name_category_reference
        and m.category_id is not Null
        and m.name_category != '0' 
"""

SQL_UPDATE_CATEGORY_ID = """
    update
        inlet.current_stock_mvideo 
    set 	
        category_id = :category_id_reference	
    where 	
        name_category = :name_category_reference
"""

# ----------------------------------------------------------------------------------------------------------------------
_Session = sessionmaker(bind=ENGINE)


def get_rows(sql: str, param: dict = None):
    with _Session() as _session:
        if param:
            result = _session.execute(text(sql), params=param)
        else:
            # print('test1')
            result = _session.execute(text(sql))

        # Извлекаем возвращенные данные (например, id)
        result_rows = result.fetchall()  # .scalar()  # Берем первую строку и первый столбец
        return result_rows


def update_rows(sql: str, param: dict = None):
    """
       Обновляем строки в бд.
    """

    with _Session() as session:

        if param:

            session.execute(text(sql), params=param)
        else:
            session.execute(text(sql))
        # Фиксируем изменения
        session.commit()


# ----------------------------------------------------------------------------------------------------------------------
def pattern_update_category_id():
    """
        Функция обновления категорий для исторических данных в таблице.
        Селектим по одной строчке из бд категории, что пустые.
        Далее апдейтим все строки, что соответствуют имени категории
        (ищем все с таким же именем категории и проставляем такой же айди категории) в полученной записи.

    """

    # _data_rows = None
    bag_list = []  # Названия категорий, для которых отсутствуют референсы, будут подставлены в запрос для пропуска.
    count = 0

    while True:

        # 2 [(None, 'Умные споты')]
        print(f'0/ bag_list {bag_list}')
        count += 1
        # ------------------------------ I

        # 1/ Получения порции данных:  -> [tuples] [(None, 643, 'Гели для стирки'),...]
        # Если есть баги (для категорий отсутствуют референсы):
        if bag_list:
            bag_list_str = ', '.join(f"'{item}'" for item in bag_list)

            sql_bag = SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW.format(bag_list_str)

            _data_rows = get_rows(
                sql_bag,
                # {'name_category_reference': bag_list_str}
            )
            print(f'1/ Если не пустой баг лист {_data_rows}')  # 2  [(None, 'Умные споты')]
        else:
            _data_rows = get_rows(SQL_NAME_CATEGORY_AND_CATEGORY_ID)  # 1 [(None, 'Умные споты')]
            print(f'2/ Если пустой баг лист {_data_rows}')

        # ------------------------------ II
        if _data_rows:

            # Будет выполняться до тех пор, пока пустые категории не закончатся.
            # while _data_rows or count == 0:

            # 1.1/ Получаем данные (распаковываем кортеж) по колонкам из списка кортежей:
            _category_id, _name_category = _data_rows[0]  # -> 'None 643 Гели для стирки'
            print(
                f'3/ Исходные данные с пропусками (category_id: {_category_id}, name_category: {_name_category})')  # 1 (category_id: None, name_category: Умные споты)

            # ------------------------------
            # 2/ Запрос эталона (такой же категории (ищем по имени категории) с непустым category_id:
            _reference_category_id = get_rows(
                SQL_REFERENCE_CATEGORY_ID, {'name_category_reference': _name_category}
            )

            if _reference_category_id:
                # 2.1/ Получаем данные (распаковываем кортеж) по колонкам из списка кортежей:
                # Всегда будет взят только первый элемент в списке, проверки не нужны (защита логики).
                _category_id_, _name_category_ = _reference_category_id[0]  #

                print(
                    f'{count}. Референсные данные (category_id: {_category_id_}) '
                    f'для пропусков в name_category: {_name_category_})'
                )

            else:
                # S199	Умные споты	0	30562
                print(
                    f'Отсутствуют данные для референса: {_reference_category_id})'  # 1 []
                )

                bag_list.append(_name_category)
                continue

            # ------------------------------
            # 3/ Основной апдейт полю категории айди всех строк с совпадающим именем категории указанным в параметрах:
            update_rows(
                SQL_UPDATE_CATEGORY_ID,
                {'category_id_reference': _category_id_, 'name_category_reference': _name_category_}
            )




        # ------------------- III Конец верхнего цикла:
        else:
            print(f'Цикл завершился, всего итераций: {count}.')
            break

# Работает хорошо.
# pattern_update_category_id()


# ----------------------------------------------------------- Черновики
# bag_list_ = ['Умные споты', 'Садовые шкафы',]
# bag_list_str = ', '.join(f"'{item}'" for item in bag_list_)
# print(bag_list_str)
# # bag_list_str = str(f"'{bag}, '" for bag in bag_list_)
# SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW_ = SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW.format(bag_list_str)
# print(SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW_)
# _data_rows = get_rows(
#     SQL_NAME_CATEGORY_AND_CATEGORY_ID_NOT_BAG_ROW_,
#     # {'name_category_reference': bag_list_}
# )
# print(f'1/ Если не пустой баг лист {_data_rows}')

#         # Перебираем по строчно ответ: (None, 752, None)
#         for rows in _data_rows:  # tuple;
#             # Получаем данные по колонкам из строки:
#             _category_id, _id, _name_category = rows  # -> 'None 643 Гели для стирки'

# -7672/umnyi-svet-30562/f/category=umnye-spoty-32246?ysclid=m6q8shsqvu574185549
# [columns for columns in valid_params]


# result_bag_list = [
#     'Умные споты',
#     'Садовые шкафы',
#     'Фотопленка',
#     'Тяпки',
#     'Аэраторы ручные',
#     'Детекторы протечек воды',
#     'Фалы',
#     'Умные зонты',
#     'Доски для мела',
#     'Ea2',
#     'Капы',
#     'Вилы',
#     'Паяльные лампы',
#     'Электросковороды',
#     'Фотовспышки',
#     'Папки-уголки',
#     'Комбисистемы',
#     'Ножи садовые',
#     'Fusion',
#     'Обратные клапаны',
#     'Бумага наждачная',
#     'Гравюры',
#     'Вантузы',
#     'Жалюзи',
#     'Bvitech',
#     'Каяки',
#     'Торцевые клещи',
#     'Одеяла',
#     'Разрезные ключи',
#     'Банные полотенца',
#     'Type-C - SD Card',
#     'RoadLike',
#     'Шкафы для вызревания мяса',
#     'Редукторы',
#     'Радиусные ключи',
#     'Стойки для утюга',
#     'Капсульные кофеварки',
#     'Lightning - 2 Lightning',
#     'Тросы стальные',
#     'Биометрические терминалы контроля доступа',
#     'Вертолеты',
#     'Насадки на дрель для резки металла',
#     'Венчики для строительных миксеров',
#     'Коронки твердосплавные',
#     'Насадки для реноваторов',
#     'Коронки биметаллические',
#     'Электромаринаторы',
#     'Кронштейны для треков',
#     'Умные очки',
#     'Подводные скутеры',
#     'Дыроколы для бумаги',
#     'Колобашки для плавания',
#     'Наборы для уборки пола',
#     'Удлинители для стеклоочистителей',
#     'Стеклоочистители ручные и аксессуары',
#     'Средства для уборки детской комнаты',
#     'Вышивальная машина',
#     'Рихтовочные инструменты',
#     'Шкафы-хьюмидоры',
#     'Ножницы по металлу',
#     'Наборы ударно-рычажного инструмента',
#     'Наборы инструментов для электрика',
#     'Наборы измерительного инструмента',
#     'Стеклодомкраты и присоски вакуумные для стекла',
#     'Автомобильные кондиционеры',
#     'Fellowes',
#     'Межзубные ершики',
#     'Наборы для ухода за полостью рта',
#     'Приборы для отбеливания зубов',
#     'нет бренда',
#     'RSQ',
#     'Мультикондитер',
#     'Умные проекторы звездного неба',
#     'Умные садовые светильники',
#     'Умные светильники соты',
#     'Аксессуары для радиотелефонов',
#     'Кофеварки капсульные', 'Аудиоконнекторы', 'Механические кофемолки', 'Тажин', 'Детские стулья',
#     'Детские кресла', 'Стулья для парикмахерских', 'Нумизматика', 'Наборы аксессуаров для кофемашин',
#     'Сетки для бадминтона', 'Ракетки для бадминтона', 'Счётчики электроэнергии',
#     'Средства для первого запуска посудомоечных машин', 'Доски пробковые', 'Моющие средства для автомоек',
#     'Накамерные мониторы', 'Колесики для компьютерных кресел', 'Диммеры', 'Выключатели',
#     'Аксессуары для электрошвабр', 'OLED-телевизоры', 'ЖК LED-телевизоры', 'Комплекты студийного света',
#     'Вспышки студийные', 'Электронные замки', 'Автоодеяла', 'Узлы подключения', 'Вентили для радиаторов',
#     'Монтажные комплекты для радиаторов', 'Столики дорожные автомобильные', 'Порталы для камина',
#     'Аксессуары для биокаминов', 'Аксессуары для отопительных котлов', 'Контейнеры для таблеток',
#     'Стеллажи для офиса', 'Футболки', 'Верхняя одежда', 'Головные уборы', 'Подвесные папки', 'Короба архивные',
#     'Детские цифровые фотоаппараты', 'Наборы для рисования', 'Товары для лепки', 'Детские украшения',
#     'Манекены художественные', 'Блестки и паетки', 'Розетки электрические', 'Тандыры',
#     'Дизельные котлы отопления', 'Системы капельного полива', 'Штанги-распылители для полива', 'Микшеры',
#     'Адаптер для автохолодильника', 'Гайковерт аккумуляторный', 'Умные накопители электроэнергии',
#     'Фильтры для вытяжки', 'Воздуховоды', 'Аксессуары для вытяжек', 'Слуховые аппараты и усилители звука',
#     'Моноподы для видеокамер', 'HDMI удлинители ', '3.5 мм DC - USB', 'Антенные ТВ-розетки',
#     'Аппараты для приготовления масок', 'Приборы для макияжа', 'Аппараты для светотерапии лица',
#     'Ходунки детские', 'Ростомеры', 'Стульчики для кормления', 'Развивающие коврики', 'Батуты детские',
#     'Культиватор аккумуляторный', 'Столы для детской', 'Массажеры для головы механические', 'Звуковые карты',
#     'Резервуары для воды к моющим пылесосам', 'Туристические плитки и примусы', 'Кисти кондитерские',
#     'Экраны от брызг', 'Фильтры для очистки спиртосодержащих жидкостей', 'Этикет-пистолеты и аксессуары',
#     'Браслеты для выживания', 'Ballu', 'La Crosse Technology', 'Oregon Scientific', 'Фреза по дереву',
#     'Потолочные вентиляторы', 'Металлическое мыло', 'Подставки, ступеньки для ванны',
#     'Диспенсеры для покрытий на унитаз', 'Боксерские мешки', 'Детекторы лжи', 'Магнитные ленты',
#     'Оградительные ленты', 'Уплотнительные ленты', 'Пакеты', 'Маты спортивные', 'Эластичные бинты',
#     'Аксессуары для фитнеса', 'Напильники и надфили', 'Пневматические трещотки', 'Музыкальные столы',
#     'Резцы и ножи по дереву', 'Музыкальные книжки', 'Стусла', 'Док станции для планшетов', 'Ледовые коньки',
#     'Лодочные моторы', 'Отвёртки ', 'Стерилизаторы маникюрных инструментов', 'Стерилизаторы зубных щеток',
#     'Фрезы для маникюра и педикюра', 'Вспышки для фотоаппаратов', 'Аксессуары для фотовспышек', 'Рыбочистки',
#     'Верхний душ', 'Душевые панели', 'Фильтры для душа', 'Буры садовые ручные',
#     'Патроны для дрелей и перфораторов', 'Плодосъёмники', 'Системы пылеудаления', 'Площадки монтажные',
#     'Лыжи для самокатов', 'Скреперы для уборки снега', 'Перчатки садовые', 'Ленточные электропилы',
#     'Электролобзики', 'Садовые дорожки и покрытия', 'Кофейные станции', 'Астропланетарии',
#     'Аксессуары для папок', 'Миска для микроволновой печи', 'Газонокосилки механические', 'Рукава напорные',
#     'Аксессуары для вентиляторов', 'Звуковые карты внутренние для компьютера', 'Ручные дровоколы',
#     'Электрические дровоколы', 'Покер', 'Черенки для уборочного инвентаря', 'Знаки мокрый пол',
#     'Щипцы для мусора', 'Полки кухонные под микроволновую печь', 'Диспенсеры для ватных дисков', 'Грелки ',
#     'Картриджи для матричных принтеров', 'Аккумуляторы для радиостанций', 'Кострукторы деревянные',
#     'Футляры для зубных щеток', 'Прессы для масла', 'Эбру - рисование на воде', 'Наушники для PS5',
#     'Фильтры для приточно-очистительных комплексов', 'Чехлы солнцезащитные для руля',
#     'Столы разделочные для общепита', 'Слайсеры', 'Этикетки А4', 'Газовые баллоны для горелок',
#     'Коврики под компьютерные кресла', 'Массажеры для тела', 'Звукосниматели',
#     'Крышки отсека для принадлежностей', 'Многофункциональные фотоаппараты', 'Наборы электроинструментов'
# ]

# for r, t, in enumerate(result_bag_list, start=1):
#     i = r
# print(i) = 241
